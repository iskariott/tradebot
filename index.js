// import 'dotenv/config';
import { RestClient } from 'okx-api';
import TelegramBot from 'node-telegram-bot-api';

const token = process.env.TELEGRAM_BOT_TOKEN;

const BTCPRICE_CHATID = process.env.BTCPRICE_CHATID;
const PEPEPRICE_CHATID = process.env.PEPEPRICE_CHATID;
const PNL_CHATID = process.env.PNL_CHATID;

const client = new RestClient({
    apiKey: process.env.APIKEY,
    apiSecret: process.env.SECRETKEY,
    apiPass: process.env.PASS,
});

const bot = new TelegramBot(token, { polling: true });

let previousMessages = {
    [BTCPRICE_CHATID]: null,
    [PEPEPRICE_CHATID]: null,
    [PNL_CHATID]: null,
};

function toValidNumber(value, fieldName = '') {
    const num = Number(value);
    if (isNaN(num)) {
        console.error(`${fieldName} - –Ω–µ–º–æ–∂–ª–∏–≤–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —É —á–∏—Å–ª–æ ${value}`);
        return -1;
    }
    return num;
}

async function getPositionData() {
    try {
        const res = await client.getPositions();
        const p = res[0];

        const upl = toValidNumber(p.upl, 'upl');
        const ep = toValidNumber(p.avgPx, 'avgPx');
        const ff = toValidNumber(p.fundingFee, 'fundingFee');
        const liq = toValidNumber(p.liqPx, 'liqPx');
        const sl = toValidNumber(p.closeOrderAlgo?.[0]?.slTriggerPx, 'slTriggerPx');
        const tp = toValidNumber(p.closeOrderAlgo?.[0]?.tpTriggerPx, 'tpTriggerPx');
        console.log('getPositionData done ‚úÖ');
        return `pl: ${upl} | ep: ${ep} | ff: ${ff.toFixed(
            2,
        )} | liq: ${liq} | sl: ${sl} | tp: ${tp}`;
    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:', err.message);
        return '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é.';
    }
}

async function getPriceData(instId) {
    try {
        const res = await client.getTicker({ instId });
        const t = res[0];

        const last = toValidNumber(t.last, `${instId}.last`);
        const low = toValidNumber(t.low24h, `${instId}.low24h`);
        const high = toValidNumber(t.high24h, `${instId}.high24h`);

        console.log('getPriceData done ‚úÖ');
        return `üü¢ ${last} ‚¨áÔ∏è ${low} ‚¨ÜÔ∏è ${high}`;
    } catch (err) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ ${instId}:`, err.message);
        return `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è ${instId}`;
    }
}

async function sendOrUpdateMessage(chatId, text) {
    try {
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —î
        if (previousMessages[chatId]) {
            await bot.deleteMessage(chatId, previousMessages[chatId]).catch((err) => {
                if (
                    err.response?.body?.description !== 'Bad Request: message to delete not found'
                ) {
                    console.error(
                        `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ ${chatId}:`,
                        err.message,
                    );
                }
                console.log('deleteMessage done ‚úÖ');
            });
        }

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ ID
        const sent = await bot.sendMessage(chatId, text);
        previousMessages[chatId] = sent.message_id;
        console.log('sendMessage done ‚úÖ');
    } catch (err) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç ${chatId}:`, err.message);
    }
}

setInterval(async () => {
    try {
        const [positionMsg, btcMsg, pepeMsg] = await Promise.all([
            getPositionData(),
            getPriceData('BTC-USDT'),
            getPriceData('PEPE-USDT'),
        ]);

        await Promise.all([
            sendOrUpdateMessage(BTCPRICE_CHATID, btcMsg),
            sendOrUpdateMessage(PEPEPRICE_CHATID, pepeMsg),
            sendOrUpdateMessage(PNL_CHATID, positionMsg),
        ]);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ü–∏–∫–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error.message);
    }
}, 60000);
